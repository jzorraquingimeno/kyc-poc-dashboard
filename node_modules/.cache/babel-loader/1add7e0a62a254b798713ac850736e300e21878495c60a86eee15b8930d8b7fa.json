{"ast":null,"code":"// API service with fallback to mock data\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://abn-kyc-backend.orangeground-daffc4e4.westeurope.azurecontainerapps.io';\nconst API_TIMEOUT = parseInt(process.env.REACT_APP_API_TIMEOUT || '10000');\nconst USE_MOCK_FALLBACK = process.env.REACT_APP_USE_MOCK_DATA_FALLBACK === 'true';\n// Mock data as fallback\nconst mockCompanyData = {\n  '12345678': {\n    legalName: 'Amsterdam Tech Solutions B.V.',\n    address: 'Herengracht 123, 1015 BG Amsterdam',\n    kvkNumber: '12345678',\n    legalForm: 'Besloten Vennootschap (B.V.)',\n    foundingDate: '15-03-2018',\n    status: 'Active',\n    sbiCode: '62010',\n    sbiDescription: 'Computer programming activities',\n    directors: ['J.M. van der Berg', 'S.A. de Vries']\n  },\n  '23456789': {\n    legalName: 'Green Garden Services',\n    address: 'Parkstraat 45, 2011 ML Haarlem',\n    kvkNumber: '23456789',\n    legalForm: 'Eenmanszaak',\n    foundingDate: '22-06-2020',\n    status: 'Active',\n    sbiCode: '81300',\n    sbiDescription: 'Landscape service activities',\n    directors: ['P.J. Janssen']\n  },\n  '34567890': {\n    legalName: 'Rotterdam Logistics Group',\n    address: 'Maasboulevard 100, 3063 NS Rotterdam',\n    kvkNumber: '34567890',\n    legalForm: 'Besloten Vennootschap (B.V.)',\n    foundingDate: '08-11-2016',\n    status: 'Active',\n    sbiCode: '52291',\n    sbiDescription: 'Forwarding agencies, ship brokers, etc.',\n    directors: ['M.R. Bakker', 'L.H. Smit', 'A.C. van Dijk']\n  }\n};\nconst mockCompanyList = [{\n  kvkNumber: '12345678',\n  companyName: 'Amsterdam Tech Solutions B.V.',\n  date: '2024-01-15',\n  category: 'KYC',\n  urgency: 'High',\n  status: 'New',\n  actions: 'Investigation Required'\n}, {\n  kvkNumber: '23456789',\n  companyName: 'Green Garden Services',\n  date: '2024-01-14',\n  category: 'KYC',\n  urgency: 'Medium',\n  status: 'In Progress',\n  actions: 'Investigation Required'\n}, {\n  kvkNumber: '34567890',\n  companyName: 'Rotterdam Logistics Group',\n  date: '2024-01-13',\n  category: 'KYC',\n  urgency: 'Low',\n  status: 'Pending Information',\n  actions: 'Investigation Required'\n}];\nclass APIService {\n  shouldUseMockFallback() {\n    return USE_MOCK_FALLBACK;\n  }\n  async makeRequest(endpoint, options = {}) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        signal: controller.signal,\n        ...options\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.warn(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n  async healthCheck() {\n    try {\n      return await this.makeRequest('/health');\n    } catch (error) {\n      console.warn('Health check failed, API may be unavailable');\n      return {\n        status: 'unavailable',\n        version: '1.0.0',\n        companies_loaded: 0,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n  async getCompanies() {\n    try {\n      const response = await this.makeRequest('/companies');\n\n      // Transform API response to match our interface\n      const companies = response.companies.map(company => {\n        var _company$kvk_number;\n        return {\n          kvkNumber: ((_company$kvk_number = company.kvk_number) === null || _company$kvk_number === void 0 ? void 0 : _company$kvk_number.toString()) || 'Unknown',\n          companyName: company.legal_entity_name || company.legal_name || 'Unknown Company',\n          date: company.founding_date || new Date().toISOString().split('T')[0],\n          category: 'KYC',\n          urgency: company.priority || company.urgency || 'Medium',\n          status: company.status || 'New',\n          actions: 'Investigation Required'\n        };\n      });\n      return companies;\n    } catch (error) {\n      console.warn('Failed to fetch companies from API, using mock data:', error);\n      return mockCompanyList;\n    }\n  }\n  async getCompanyDetails(kvkNumber) {\n    try {\n      const response = await this.makeRequest('/companyDetails/', {\n        method: 'POST',\n        body: JSON.stringify({\n          kvk_number: kvkNumber\n        })\n      });\n\n      // Transform API response to match our interface\n      const companyInfo = {\n        legalName: response.legal_name || response.legalName || 'Unknown Company',\n        address: response.address || 'Address not available',\n        kvkNumber: response.kvk_number || kvkNumber,\n        legalForm: response.legal_form || response.legalForm || 'Unknown',\n        foundingDate: response.founding_date || response.foundingDate || 'Unknown',\n        status: response.status || 'Unknown',\n        sbiCode: response.sbi_code || response.sbiCode || 'Unknown',\n        sbiDescription: response.sbi_description || response.sbiDescription || 'Unknown',\n        directors: response.directors || response.board_members || ['Unknown']\n      };\n      return companyInfo;\n    } catch (error) {\n      console.warn(`Failed to fetch company details for ${kvkNumber} from API, using mock data:`, error);\n\n      // Return mock data or default company info\n      if (mockCompanyData[kvkNumber]) {\n        return mockCompanyData[kvkNumber];\n      }\n      return {\n        legalName: 'Sample Company B.V.',\n        address: 'Business Street 1, 1000 AB Amsterdam',\n        kvkNumber: kvkNumber,\n        legalForm: 'Besloten Vennootschap (B.V.)',\n        foundingDate: '01-01-2020',\n        status: 'Active',\n        sbiCode: '70221',\n        sbiDescription: 'Business and other management consultancy activities',\n        directors: ['John Doe', 'Jane Smith']\n      };\n    }\n  }\n  async processKYC(request) {\n    try {\n      const response = await this.makeRequest('/processkyc', {\n        method: 'POST',\n        body: JSON.stringify(request)\n      });\n      return response;\n    } catch (error) {\n      console.warn('Failed to process KYC from API, returning mock response:', error);\n\n      // Return mock KYC processing result\n      return {\n        status: 'completed',\n        company_name: request.company_name,\n        risk_score: Math.floor(Math.random() * 100),\n        findings: ['Company website appears legitimate', 'No negative news found in recent searches', 'Social media presence is consistent with business activities'],\n        recommendations: ['Proceed with standard onboarding process', 'Request additional documentation for verification'],\n        processed_at: new Date().toISOString()\n      };\n    }\n  }\n  async getRoot() {\n    try {\n      return await this.makeRequest('/');\n    } catch (error) {\n      console.warn('Failed to fetch root endpoint:', error);\n      return {\n        message: 'API unavailable - using offline mode',\n        version: '1.0.0',\n        docs_url: '/docs',\n        health_url: '/health'\n      };\n    }\n  }\n}\nexport const apiService = new APIService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","API_TIMEOUT","parseInt","REACT_APP_API_TIMEOUT","USE_MOCK_FALLBACK","REACT_APP_USE_MOCK_DATA_FALLBACK","mockCompanyData","legalName","address","kvkNumber","legalForm","foundingDate","status","sbiCode","sbiDescription","directors","mockCompanyList","companyName","date","category","urgency","actions","APIService","shouldUseMockFallback","makeRequest","endpoint","options","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","headers","signal","clearTimeout","ok","Error","json","error","console","warn","healthCheck","version","companies_loaded","timestamp","Date","toISOString","getCompanies","companies","map","company","_company$kvk_number","kvk_number","toString","legal_entity_name","legal_name","founding_date","split","priority","getCompanyDetails","method","body","JSON","stringify","companyInfo","legal_form","sbi_code","sbi_description","board_members","processKYC","request","company_name","risk_score","Math","floor","random","findings","recommendations","processed_at","getRoot","message","docs_url","health_url","apiService"],"sources":["/home/jzorraquingimeno/dashboard-frontend/src/services/api.ts"],"sourcesContent":["// API service with fallback to mock data\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://abn-kyc-backend.orangeground-daffc4e4.westeurope.azurecontainerapps.io';\nconst API_TIMEOUT = parseInt(process.env.REACT_APP_API_TIMEOUT || '10000');\nconst USE_MOCK_FALLBACK = process.env.REACT_APP_USE_MOCK_DATA_FALLBACK === 'true';\n\nexport interface CompanyInfo {\n  legalName: string;\n  address: string;\n  kvkNumber: string;\n  legalForm: string;\n  foundingDate: string;\n  status: string;\n  sbiCode: string;\n  sbiDescription: string;\n  directors: string[];\n}\n\nexport interface CompanyListItem {\n  kvkNumber: string;\n  companyName: string;\n  date: string;\n  category: string;\n  urgency: string;\n  status: string;\n  actions: string;\n}\n\nexport interface ProcessKYCRequest {\n  company_name: string;\n  home_url: string;\n  about_url: string;\n}\n\n// Mock data as fallback\nconst mockCompanyData: { [key: string]: CompanyInfo } = {\n  '12345678': {\n    legalName: 'Amsterdam Tech Solutions B.V.',\n    address: 'Herengracht 123, 1015 BG Amsterdam',\n    kvkNumber: '12345678',\n    legalForm: 'Besloten Vennootschap (B.V.)',\n    foundingDate: '15-03-2018',\n    status: 'Active',\n    sbiCode: '62010',\n    sbiDescription: 'Computer programming activities',\n    directors: ['J.M. van der Berg', 'S.A. de Vries']\n  },\n  '23456789': {\n    legalName: 'Green Garden Services',\n    address: 'Parkstraat 45, 2011 ML Haarlem',\n    kvkNumber: '23456789',\n    legalForm: 'Eenmanszaak',\n    foundingDate: '22-06-2020',\n    status: 'Active',\n    sbiCode: '81300',\n    sbiDescription: 'Landscape service activities',\n    directors: ['P.J. Janssen']\n  },\n  '34567890': {\n    legalName: 'Rotterdam Logistics Group',\n    address: 'Maasboulevard 100, 3063 NS Rotterdam',\n    kvkNumber: '34567890',\n    legalForm: 'Besloten Vennootschap (B.V.)',\n    foundingDate: '08-11-2016',\n    status: 'Active',\n    sbiCode: '52291',\n    sbiDescription: 'Forwarding agencies, ship brokers, etc.',\n    directors: ['M.R. Bakker', 'L.H. Smit', 'A.C. van Dijk']\n  }\n};\n\nconst mockCompanyList: CompanyListItem[] = [\n  {\n    kvkNumber: '12345678',\n    companyName: 'Amsterdam Tech Solutions B.V.',\n    date: '2024-01-15',\n    category: 'KYC',\n    urgency: 'High',\n    status: 'New',\n    actions: 'Investigation Required'\n  },\n  {\n    kvkNumber: '23456789',\n    companyName: 'Green Garden Services',\n    date: '2024-01-14',\n    category: 'KYC',\n    urgency: 'Medium',\n    status: 'In Progress',\n    actions: 'Investigation Required'\n  },\n  {\n    kvkNumber: '34567890',\n    companyName: 'Rotterdam Logistics Group',\n    date: '2024-01-13',\n    category: 'KYC',\n    urgency: 'Low',\n    status: 'Pending Information',\n    actions: 'Investigation Required'\n  }\n];\n\nclass APIService {\n  private shouldUseMockFallback(): boolean {\n    return USE_MOCK_FALLBACK;\n  }\n\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n        signal: controller.signal,\n        ...options,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.warn(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  async healthCheck(): Promise<{ status: string; version: string; companies_loaded: number; timestamp: string }> {\n    try {\n      return await this.makeRequest('/health');\n    } catch (error) {\n      console.warn('Health check failed, API may be unavailable');\n      return {\n        status: 'unavailable',\n        version: '1.0.0',\n        companies_loaded: 0,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  async getCompanies(): Promise<CompanyListItem[]> {\n    try {\n      const response = await this.makeRequest<{ companies: any[]; total_count: number }>('/companies');\n      \n      // Transform API response to match our interface\n      const companies = response.companies.map((company: any) => ({\n        kvkNumber: company.kvk_number?.toString() || 'Unknown',\n        companyName: company.legal_entity_name || company.legal_name || 'Unknown Company',\n        date: company.founding_date || new Date().toISOString().split('T')[0],\n        category: 'KYC',\n        urgency: company.priority || company.urgency || 'Medium',\n        status: company.status || 'New',\n        actions: 'Investigation Required'\n      }));\n\n      return companies;\n    } catch (error) {\n      console.warn('Failed to fetch companies from API, using mock data:', error);\n      return mockCompanyList;\n    }\n  }\n\n  async getCompanyDetails(kvkNumber: string): Promise<CompanyInfo> {\n    try {\n      const response = await this.makeRequest<any>('/companyDetails/', {\n        method: 'POST',\n        body: JSON.stringify({ kvk_number: kvkNumber }),\n      });\n\n      // Transform API response to match our interface\n      const companyInfo: CompanyInfo = {\n        legalName: response.legal_name || response.legalName || 'Unknown Company',\n        address: response.address || 'Address not available',\n        kvkNumber: response.kvk_number || kvkNumber,\n        legalForm: response.legal_form || response.legalForm || 'Unknown',\n        foundingDate: response.founding_date || response.foundingDate || 'Unknown',\n        status: response.status || 'Unknown',\n        sbiCode: response.sbi_code || response.sbiCode || 'Unknown',\n        sbiDescription: response.sbi_description || response.sbiDescription || 'Unknown',\n        directors: response.directors || response.board_members || ['Unknown']\n      };\n\n      return companyInfo;\n    } catch (error) {\n      console.warn(`Failed to fetch company details for ${kvkNumber} from API, using mock data:`, error);\n      \n      // Return mock data or default company info\n      if (mockCompanyData[kvkNumber]) {\n        return mockCompanyData[kvkNumber];\n      }\n      \n      return {\n        legalName: 'Sample Company B.V.',\n        address: 'Business Street 1, 1000 AB Amsterdam',\n        kvkNumber: kvkNumber,\n        legalForm: 'Besloten Vennootschap (B.V.)',\n        foundingDate: '01-01-2020',\n        status: 'Active',\n        sbiCode: '70221',\n        sbiDescription: 'Business and other management consultancy activities',\n        directors: ['John Doe', 'Jane Smith']\n      };\n    }\n  }\n\n  async processKYC(request: ProcessKYCRequest): Promise<any> {\n    try {\n      const response = await this.makeRequest<any>('/processkyc', {\n        method: 'POST',\n        body: JSON.stringify(request),\n      });\n\n      return response;\n    } catch (error) {\n      console.warn('Failed to process KYC from API, returning mock response:', error);\n      \n      // Return mock KYC processing result\n      return {\n        status: 'completed',\n        company_name: request.company_name,\n        risk_score: Math.floor(Math.random() * 100),\n        findings: [\n          'Company website appears legitimate',\n          'No negative news found in recent searches',\n          'Social media presence is consistent with business activities'\n        ],\n        recommendations: [\n          'Proceed with standard onboarding process',\n          'Request additional documentation for verification'\n        ],\n        processed_at: new Date().toISOString()\n      };\n    }\n  }\n\n  async getRoot(): Promise<{ message: string; version: string; docs_url: string; health_url: string }> {\n    try {\n      return await this.makeRequest('/');\n    } catch (error) {\n      console.warn('Failed to fetch root endpoint:', error);\n      return {\n        message: 'API unavailable - using offline mode',\n        version: '1.0.0',\n        docs_url: '/docs',\n        health_url: '/health'\n      };\n    }\n  }\n}\n\nexport const apiService = new APIService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}